XML-RPC API
===========

setupTimeFrame(interval, retention_period=None)
-----------------------------------------------

Creates a new aggregate for the specified interval. If an active aggregate with
the same interval already exists its retention_period is updated instead.

getTimeFrames()
---------------

Returns a list of active aggregates. Each list item is a dictionary containing
the following keys:

	* id: the (internal) id of the timeframe
	* interval: the aggregate interval in seconds
	* retention_period: the retention period in seconds, or None if no
	  retention period is specified

disableTimeFrame(timeframe_id)
------------------------------

Disables an aggregate. Data from the aggregate can still be retrieved and old
datapoints are cleaned up by the maintenance tasks, however no new data will be
added to the aggregate.

insertValueBulk(updates):
-------------------------

Inserts new values into the database. 'updates' is a pickled list of updates.
Each update is a list containing the following list indices:

	* 0: the host
	* 1: parent service name
	* 2: service name
	* 3: plot name
	* 4: timestamp
	* 5: unit (one of counter, byte, time, percent or raw)
	* 6: value
	* 7: lower limit ('min' perfdata) for the value
	* 8: upper limit ('max' perfdata) for the value
	* 9: lower warning limit
	* 10: upper warning limit
	* 11: warning range type ('inside' or 'outside')
	* 12: lower critical limit
	* 13: upper critical limit
	* 14: critical range type ('inside' or 'outside')

getHosts()
----------

Returns a list of hosts for which plots are available.

getHostsFiltered(pattern, limit=None, offset=None)
--------------------------------------------------

Returns a list of hosts matching the specified pattern. The range out returned
hosts can be specified using the limit and offset parameters.

getServices(host_pattern, service_pattern=None, limit=None, offset=None)
------------------------------------------------------------------------

Returns a list of services for the specified host. service_pattern, limit and
offset can be used to further limit the returned service names.

getPlotValues(host_pattern, service_pattern, start_timestamp=None,
    end_timestamp=None, granularity=None, null_tolerance=0)
------------------------------------------------------------------

Retrieves values for the specified hosts/services. 'start_timestamp' and
'end_timestamp' specify the interval - both are UNIX timestamps. 'granularity'
specifies how fine-grained the data should be (ideally only one datapoint per
'granularity' seconds will be returned). 'null_tolerance' specifies how
many missing consecutive datapoints are ignored before inserting None values
in the output.

getPlotValues2(query, start_timestamp=None, end_timestamp=None,
    granularity=None, null_tolerance=0)
---------------------------------------------------------------

Similar to getPlotValues() except for the fact that this API allows fine-grained
filtering of the results. 'query' is a dictionary with the following structure:

{
  'host1': {
    'service1': {
      'plot1': [ 'avg' ],
      'plot2': [ 'min', 'max', 'avg' ]
    },
    'service2': {
      ...
    }
  }
}

shutdown()
----------

Stops the daemon. This is used by the init script.

addComment(host, parent_service, service, timestamp, author, text)
------------------------------------------------------------------

Creates a new comment object for the specified service. Returns the new
comment's ID.

deleteComment(comment_id)
-------------------------

Deletes a comment. The comment's ID can be either obtained from the return
value of the addComment() call or by using the getPlotValues() function -
which in addition to returning plot values also returns any matching
comments for the specified time interval.

updateComment(comment_id, text)
-------------------------------

Updates a comment's text.
