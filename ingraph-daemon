#!/usr/bin/env python
import Queue
import time
import traceback
import threading
import sys

import ingraph.api
import ingraph.model
import ingraph.utils
import ingraph.xmlrpc

print("NETWAYS inGraph (backend daemon)")

config = ingraph.utils.load_config('ingraph-database.conf')
config = ingraph.utils.load_config('ingraph-xmlrpc.conf', config)
if config['dsn'] == None:
    print("Error: You need to set a database connection string ('dsn' setting)"
          " in your configuration file.")
    sys.exit(1)

if 'xmlrpc_address' not in config or 'xmlrpc_port' not in config:
    print("Error: You need to set a bind address/port for the XML-RPC"
          " interface ('xmlrpc_address' and 'xmlrpc_port' settings).")
    sys.exit(1)
    
if 'xmlrpc_username' not in config or 'xmlrpc_password' not in config:
    print("Error: You need to set an XML-RPC username and password "
          "('xmlrpc_username' and 'xmlrpc_password' settings) in your "
          "configuration file.")
    sys.exit(1)
    
print('Connecting to the database...')
engine = ingraph.model.createModelEngine(config['dsn'])

queryqueue = Queue.Queue(maxsize=200000)

def flushDBThread(engine):
    while True:
        print("Queue size: %d" % queryqueue.qsize())
        items = []
        while len(items) < 5000:
            try:
                item = queryqueue.get(timeout=10)
            except Queue.Empty:
                break
            items.append(item)

        st = time.time()
        try:
            conn = engine.connect()
            transaction = conn.begin()
            ingraph.model.Plot.executeUpdateQueries(conn, items)
            transaction.commit()
            conn.close()
        except Exception:
            print("Exception occured while flushing DB updates")
            traceback.print_exc()
        et = time.time()
        
        print("Flushed %d updates in %f seconds." % (len(items), et-st))

flushthread = threading.Thread(target=flushDBThread, args=(engine,))
flushthread.daemon = True
flushthread.start()

print("Starting XML-RPC interface on %s:%d..." %
      (config['xmlrpc_address'], config['xmlrpc_port']))
server = ingraph.xmlrpc.AuthenticatedXMLRPCServer((config['xmlrpc_address'],
                                                   config['xmlrpc_port']),
                                                   allow_none=True)
server.timeout = 5

if sys.version_info[:2] < (2,6):
    server.socket.settimeout(server.timeout)

server.required_username = config['xmlrpc_username']
server.required_password = config['xmlrpc_password']

server.register_introspection_functions()
server.register_multicall_functions()
server.register_instance(ingraph.api.BackendRPCMethods(engine, queryqueue))

shutdown_server = False

print("Waiting for XML-RPC requests...")

while not shutdown_server:
    server.handle_request()
    ingraph.model.runMaintenanceTasks(engine)
